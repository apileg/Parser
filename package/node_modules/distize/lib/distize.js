"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.distize = distize;
var _events = require("events");
var _path = require("path");
var _copyNodeModules = require("./copy-node-modules");
var _copySourceFiles = require("./copy-source-files");
var _fs = require("./utils/fs");
function distize(options) {
    var onCopy = function onCopy(src, dest) {
        emitter.emit("copy", src, dest);
    };
    var _basePath;
    var basePath = (_basePath = options.basePath) !== null && _basePath !== void 0 ? _basePath : process.cwd();
    var _out;
    var dest1 = (0, _path).resolve(basePath, (_out = options.out) !== null && _out !== void 0 ? _out : "dist");
    var emitter = new _events.EventEmitter();
    var promise = Promise.resolve().then(function() {
        if (options.noClean) {
            return Promise.resolve();
        }
        emitter.emit("progress", "CLEAN");
        return (0, _fs).remove(dest1);
    }).then(function() {
        if (Array.isArray(options.src) && options.src.length === 0) {
            return Promise.resolve();
        }
        emitter.emit("progress", "COPY_SOURCE_FILES");
        return (0, _copySourceFiles).copySourceFiles(options.src, dest1, {
            basePath: options.basePath,
            onCopy: onCopy
        });
    }).then(function() {
        if (options.noModules) {
            return Promise.resolve();
        }
        emitter.emit("progress", "COPY_NODE_MODULES");
        var modulePath = options.modulePath && (0, _path).resolve(basePath, options.modulePath.replace(/\/node_modules\/?$/, "")) || basePath;
        return (0, _fs).remove((0, _path).resolve(dest1, "node_modules")).then(function() {
            return (0, _copyNodeModules).copyNodeModules(dest1, {
                basePath: options.basePath,
                cwd: modulePath,
                devDeps: options.dev,
                onCopy: onCopy
            });
        });
    }).then(function() {
        emitter.emit("done");
    });
    Object.assign(promise, {
        on: function on(event, listener) {
            emitter.on(event, listener);
            return promise;
        }
    });
    return promise;
}

//# sourceMappingURL=distize.js.map