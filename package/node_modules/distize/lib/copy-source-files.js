"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.copySourceFiles = copySourceFiles;
var _path = require("path");
var _fs = require("./utils/fs");
var _path1 = require("./utils/path");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function copySourceFiles(src, dest) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (!src) {
        throw new TypeError("Missing source path(or pattern) argument.");
    }
    if (!dest) {
        throw new TypeError("Missing destination directory argument.");
    }
    var basePath = options.basePath ? (0, _path).resolve(process.cwd(), options.basePath) : process.cwd();
    return (0, _path1).glob(src).then(function(files) {
        return _toConsumableArray(new Set(files.map(function(file) {
            return (0, _path).resolve(basePath, file);
        })));
    }).then(function(files) {
        return files.reduce(function(carry, file) {
            return carry.then(function() {
                return (0, _fs).copy(file, (0, _path).resolve(basePath, dest, (0, _path).basename(file)), {
                    onCopy: options.onCopy
                });
            });
        }, Promise.resolve());
    });
}

//# sourceMappingURL=copy-source-files.js.map