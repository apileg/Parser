#!/usr/bin/env node
"use strict";
var _commandLineArgs = _interopRequireDefault(require("command-line-args"));
var _commandLineUsage = _interopRequireDefault(require("command-line-usage"));
var _ora = _interopRequireDefault(require("ora"));
var _distize = require("../distize");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var cmdOptions = [
    {
        group: "build",
        name: "src",
        type: String,
        multiple: true,
        defaultOption: true,
        defaultValue: []
    },
    {
        group: "build",
        name: "help",
        alias: "h",
        type: Boolean,
        description: "Display this usage info."
    },
    {
        group: "build",
        name: "version",
        alias: "V",
        type: Boolean,
        description: "Output the version number."
    },
    {
        group: "build",
        name: "verbose",
        alias: "v",
        type: Boolean,
        description: "Increase the verbosity of messages."
    },
    {
        group: "build",
        name: "out",
        alias: "o",
        type: String,
        description: "Copy all input files into an output directory.\n[default: {bold dist}]",
        defaultValue: "dist"
    },
    {
        group: "build",
        name: "no-clean",
        type: Boolean,
        description: "Without cleaning the output directory."
    },
    {
        group: "modules",
        name: "no-files",
        type: Boolean,
        description: "Run without copying files."
    },
    {
        group: "modules",
        name: "no-modules",
        type: Boolean,
        description: "Run without copying node_modules."
    },
    {
        group: "modules",
        name: "module-path",
        alias: "M",
        type: String,
        description: "Change node_modules path."
    },
    {
        group: "modules",
        name: "dev",
        alias: "D",
        type: Boolean,
        description: "Copy modules in devDependencies also."
    }, 
];
var args = (0, _commandLineArgs).default(cmdOptions)._all;
if (args.version) {
    console.log("v".concat(require("../../package.json").version)) // eslint-disable-line @typescript-eslint/no-var-requires
    ;
    process.exit(0);
}
if (args.help) {
    var log = args.help ? console.log : console.error;
    log((0, _commandLineUsage).default([
        {
            content: "{yellow Usage:}",
            raw: true
        },
        {
            content: [
                "$ distize <path ...> [options]"
            ]
        },
        {
            content: "{yellow Synopsis:}",
            raw: true
        },
        {
            content: [
                "$ distize [{bold --timeout} {underline ms}] {bold --src} {underline file} ...",
                "$ distize {bold --help}", 
            ]
        },
        {
            content: "{yellow Options:}",
            raw: true
        },
        {
            hide: [
                "src"
            ],
            optionList: cmdOptions,
            group: "build"
        },
        {
            content: "{yellow Module Options:}",
            raw: true
        },
        {
            optionList: cmdOptions,
            group: "modules"
        }, 
    ]).replace(/^\s+/, ""));
    process.exit(args.help ? 0 : 1);
}
var cwd = process.cwd();
var app = (0, _distize).distize({
    src: args["no-files"] ? [] : args.src.length > 0 ? args.src : ".",
    basePath: cwd,
    out: args.out,
    noClean: args["no-clean"],
    modulePath: args["module-path"],
    noModules: args["no-modules"],
    dev: args.dev
});
var spinner = null;
app.on("progress", function(name) {
    switch(name){
        case "CLEAN":
            {
                spinner === null || spinner === void 0 ? void 0 : spinner.succeed();
                spinner = (0, _ora).default('Clean old dist files, "'.concat(args.out, '"')).start();
                break;
            }
        case "COPY_SOURCE_FILES":
            {
                spinner === null || spinner === void 0 ? void 0 : spinner.succeed();
                spinner = (0, _ora).default("Copy source files").start();
                break;
            }
        case "COPY_NODE_MODULES":
            {
                spinner === null || spinner === void 0 ? void 0 : spinner.succeed();
                spinner = (0, _ora).default("Copy node_modules").start();
                break;
            }
    }
});
app.on("done", function() {
    spinner === null || spinner === void 0 ? void 0 : spinner.succeed();
});
if (args.verbose) {
    app.on("copy", function(src, dest) {
        console.log('> Copy file "'.concat(src.replace(cwd, "").replace(/^\/+/, ""), '" to "').concat(dest.replace(cwd, "").replace(/^\/+/, ""), '"'));
    });
}

//# sourceMappingURL=cli.js.map